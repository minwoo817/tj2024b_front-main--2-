// [1] continue; : 가장 가까운 for문의 증감식으로 코드 흐름 이동
for(let i = 1; i <= 5; i++){
    if(i==3){
        continue; //코드 흐름이 continue 만나면 가장 가까운 증감식으로 이동
        //즉, continue 이후 코드는 실행되지 않는다
    }
    console.log(i) // 1 2 4 5가 순서대로 출력
}
// [2] break; : 가장 가까운 for문의 { } 종료/탈출/끝내기
for(let i = 1; i <= 10; i++){
    if(i == 5){
        break;  //코드 흐름이 break를 만나면 가장 가까운 반복문 종료
    }   // 즉, break 이후 코드는 실행되지 않는다
    console.log(i); // 1 2 3 4가 순서대로 출력
}

// [3] 무한루프 : 종료되는 조건이 없이 계속적으로 반복되는 구조, 메모리 과부하
/*
for( ; ; ){     // for문 무한루프 : 초기값, 조건, 증감 모두 생략
    console.log('무한출력')
}
*/
// (실습1) 6개의 정수를 입력받아 하나의 배열에 저장하시오.
    // 조건 : 배열 내 중복은 없어야 한다.
    // 조건 : 배열 내 개수가 6개 되면 프로그램 종료한다.
let list = []
    for( ; ; ){
    let num = Number(prompt(`${list.length}번째 정수 입력 : `))
    // 처리 : 중복 검사, 배열 저장, 개수 확인(개수는 처음부터 6개로 지정했음, 무한루프일때 개수 확인)
        // 1. 중복 검사 : .indexOf('찾을데이터') : 배열내 찾을 데이터가 존재하면 인덱스/ 없으면 -1
    if(list.indexOf(num) != -1){ // <-- 만약에 배열 내 입력받은 값이 존재하지 않으면 / indexOf(num) == -1 이면 존재하지 않는다는 뜻 
        alert('중복입니다.');   // alert() : HTML 알람 메시지 함수
        continue;           //가장 가까운 for의 증가식으로 이동 아래 코드는 실행 X
    }
    // 2. 배열 저장 : 배열.push('새로운 값') : 배열 내 마지막 인덱스에 새로운 값 추가 함수
    list.push(num)
    // 3. 개수체크 : 배열.length : 배열 내 요소의 개수/총길이 반환 속성      
    if(list.length >= 6){   // 만약 배열의 총길이(요소 개수)가 6개 이상이면
        break;          //강제 종료
    } 
}
console.log(`배열 : ${list}`)