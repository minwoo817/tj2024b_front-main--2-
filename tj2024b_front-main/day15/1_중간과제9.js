/*
    중간과제 9: 기계식 주차장 시스템 구현
        [요구사항]
        1. 주차할 수 있는 총 차량 대수는 20대입니다.
        2. 차량 번호와 주차할 위치를 클릭/입력받아 [입차] 버튼 클릭한다.
            단] 해당 위치에 입차된 차량이 존재하면 '입차불가' 안내 출력 아니면 '입차성공' 안내 출력
        3. 차량번호를 입력받아 [출차] 버튼 클릭한다.
            단] 출차 되는 차량의 위치와 주차료(금액) 안내 출력
            단] 금액은 1초당 100원 계산, 단 하루가 지나지 않는 조건
        ======================================================================================
        [개발순서]
        1. 프론트엔드 html 구성
        2. JS 메모리 구성(배열/변수/CSV)
            1. 차량번호, 주차위치, 입차시간, 요금, 출차시간
            2. 정보 예시] 여러개 변수들의 값을 하나의 변수에서 관리하는 방법 -> 배열
                [차1]
                "111어1111"
                'A-1'
                '10:14:30'
                '3000'
                '12:10:20'
                [차2]
                "222어2222"
                'A-2'
                '10:15:30'
                '6000'
                '14:10:20'

                ----> 차량 2대 주차되면 정보는 10개, 차량 20대 --> 정보 100개
            3. 배열 활용
            [1] 
                차량번호목록 = ["111어1111", "222어2222"]
                주차위치목록 = ['A-1', 'A-2']
                입차시간목록 = ['10:14:30', '10:15:30']
                주차금액 = ['3000', '6000']
                출차시간목록 = ['12:10:20', '14:10:20']
            [2]
                주차정보 1대 csv형식 문자열 표현 : "111어1111",'A-1','10:14:30','3000','12:10:20'
                주차정보 1대 csv형식 문자열 표현 : "222어2222",'A-2','10:15:30','6000','14:10:20'
                * 주차정보목록 = ["111어1111,A-1,10:14:30,3000,12:10:20" , "222어2222,A-2,10:15:30,6000,14:10:20"]
                
                * 주차정보목록 = ["111어1111,A-1,10:14:30" , "222어2222,A-2,10:15:30"]

                * 주차위치목록 = ["빈좌석", "빈좌석", "빈좌석", "111어1111,10:14:30", "빈좌석", 
                                "빈좌석", "빈좌석", "빈좌석", "빈좌석", "빈좌석", 
                                "빈좌석", "빈좌석", "222어2222,10:15:30", "빈좌석", "빈좌석", 
                                "빈좌석", "빈좌석", "빈좌석", "빈좌석", "빈좌석", ]
                * 주차정보목록 = ["111어1111,10:14:30" , "222어2222,10:15:30"]
                =인덱스 20개(좌석)
        3. 함수 구성(함수명, 실행조건, 매개변수 판단)
            1. 입차함수 : [입차] 버튼 클릭했을때, 차량번호/주차위치
            2. 출차함수 : [출차] 버튼 클릭했을때, 차량번호

        4. 각 함수별 기능 구현, 코드 작성
        5. 각 함수별 기능 구현 후 HTML(onclick) 연동
        6. 테스트
*/
// [0]
let 주차정보목록 = ["빈좌석", "빈좌석", "빈좌석", "111어1111,10:14:30", "빈좌석", 
                "빈좌석", "빈좌석", "빈좌석", "빈좌석", "빈좌석", 
                "빈좌석", "빈좌석", "222어2222,10:15:30", "빈좌석", "빈좌석", 
                "빈좌석", "빈좌석", "빈좌석", "빈좌석", "빈좌석", ]
console.log(주차정보목록);
// [1] 입차함수 // [입차] 버튼 클릭했을떄, 차량번호, 주차위치
function 입차함수(){
        
        // 1. 입력 (차량번호/ 주차위치를 HTML에서 입력받은 값을 JS로 가져온다.) document.querySelector()
        let 차량번호 = document.querySelector('.inCarNum').value; //console.log(차량번호);
        let 주차위치 = document.querySelector('.inCarLoc').value; //console.log(주차위치);

        // 2. 처리 (1. 빈좌석인지 확인 / 검사 2. 두 정보를 하나의 문자열(csv)로 구성해서 주차정보목록(배열) 저장) if, push
            // (검사1) 빈 좌석인지 체크, if에 선택한 인덱스(주차위치)가 값이 '빈좌석'이라는 문자열이면  
            if(주차정보목록[주차위치-1] != "빈좌석"){
                alert('이미 주차된 차량이 존재합니다. 입차불가')
                return; // 리턴값, 반환값 // 함수가 종료된다. // return : 함수 종료 vs break : 반복문 종료
                // 리턴하는데 값이 없이 return 사용 시 함수 종료 목적으로 사용할 수 있다.
                // 함수가 종료되므로 아래 코드는 실행되지 않는다.
            }
            else{
                alert('입차성공')
            }
            // (검사2) 위치가 유효한지, 1~20 사이만 가능 //(검사3) 차량번호 유효한지, 이미 주차된 차량번호
        // 현재시간 만들기 = 입차시간 : 차량이 입력된 현재 시간을 구하는 것
        let today = new Date(); //현재 시간/날짜 기능/함수 제공하는 객체 반환
        let hours = today.getHours();
        let minutes = today.getMinutes();
        let seconds = today.getSeconds();
        let 입차시간 = `${hours}:${minutes}:${seconds}`
            // 주차위치란 : 현재 설계상 주차위치는 주차정보목록의 배열의 인덱스로 대체중. 주차위치 ==배열인덱스
        주차정보목록[주차위치-1] = `${차량번호},${입차시간}`; //console.log(주차정보목록);

        // 3. 출력 처리 결과 내용을 전달한다 console.log
        console.log('현재 주차 현황')
        console.log(주차정보목록);
    
}
// [2] 출차함수 만들기 // [출차]버튼 클릭했을때, 차량번호
function 출차함수(){
    
    // 1. [입력] 차량번호 HTML에서 입력받은 값을 JS로 가져온다. document.querySelector()
    let 출차차량번호 = document.querySelector('.outCarNum').value; //console.log(차량번호);
    // 2. [처리] 입력받은 차량번호의 입차시간과 현재시간(출차시간)을 초(당)로 환산하여 요금 계산 계산식
        // --- 현재 차량번호가 존재하는지 검사 1층부터 20층까지 확인, 순회
    // 증거/기록, 상태 저장 용도 변수 활용
    let searchOk = false;
        for(let index = 0; index <= 주차정보목록.length -1; index++){
        let 차량정보 = 주차정보목록[index]; // index번째의 차량정보 꺼내기
        if(차량정보 == "빈좌석"){
            continue;
        }
        // 차량번호 검사
        let 차량 = 차량정보.split(","); // 차량[0] = 차량번호 차량 [1] = 입차시간
        let 입차차량번호 = 차량[0];
        let 입차시간 = 차량[1];
        if(입차차량번호 == 출차차량번호){ // 이미 입차된 차량번호와 출차차량번호와 같으면
            searchOk = true;
            // 요금 계산 : 초당 100원, 출차시간 - 입차시간
                // 1. 출차시간 : 현재 출차를 요구했을떄 현재시간
            let outHours = new Date().getHours();
            let outMinutes = new Date().getMinutes();
            let outSeconds = new Date().getSeconds();
            let 출차시간환산 = (outHours*3600) + (outMinutes*60) + (outSeconds)
            let inHours = Number(입차시간.split(":")[0])
            let inMinutes = Number(입차시간.split(":")[1])
            let inSeconds = Number(입차시간.split(":")[2])
            let 입차시간환산 = (inHours * 3600) + (inMinutes*60) + (inSeconds)
            let 사용시간 = 출차시간환산 - 입차시간환산
            let 사용금액 = 사용시간 * 100
            // 차량 정보 빼주기, 차량문자열 -> 빈좌석 변경 
            주차정보목록[index] = "빈좌석";
            console.log(`출차 완료 : 위치 : ${index + 1} 사용금액 : ${사용금액}`)
            break;
        }
        // else X -> 아직 비교할 차량이 남아있기 때문
    }
    if(searchOk == false){alert('주차된 차량이 없습니다.');}
    // 3. [출력] 요금과 차량위치를 출력한다. console.log() 
    console.log(주차정보목록);
}  
